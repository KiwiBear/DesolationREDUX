 /**
  * \brief  Link Worlds
  *
  *         Creates an World, is not meant to be run in Arma
  *
  * \param      Name                    String
  *             Map                     String
  * \return     WorldOrderedUUID        Containing CharacterData or Empty Array
  *
  */
  $VAR_WorldOrderedUUID$ = generateOrderedUUID();
  INSERT INTO `world` (`uuid`, `name`, `map`) 
  VALUES (CAST($VAR_WorldOrderedUUID$ AS BINARY, $VAR_Name$, $VAR_Map$);

 /**
  * \brief  Link Worlds
  *
  *         Links 2 Worlds, is not meant to be run in Arma
  *
  * \param      World1OrderedUUID UUID of World1
  *             World2OrderedUUID UUID of World2
  * \return     ArmA Array        Containing CharacterData or Empty Array
  *
  */
  INSERT INTO `world_is_linked_to_world` (`world_uuid1`, `world_uuid2`) VALUES (CAST($VAR_World1OrderedUUID$ AS BINARY), CAST($VAR_World2OrderedUUID$ AS BINARY))
  INSERT INTO `world_is_linked_to_world` (`world_uuid1`, `world_uuid2`) VALUES (CAST($VAR_World2OrderedUUID$ AS BINARY), CAST($VAR_World1OrderedUUID$ AS BINARY))

 /**
  * \brief  Player Login
  *
  *         Loads UUID of Player
  *         Loads UUID of Death Persistent Variables
  *         Updates/Creats Player Record
  *
  * \param      Nickname          profileName
  *             SteamID           getPlayerUID player
  *             WorldOrderedUUID  UUID of World (taken from configfile)
  * \return     PlayerOrderedUUID UUID of Player
  *             VariabOrderedUUID UUID of Death Persistent Variables
  *
  */
  
  SELECT `player`.`uuid`, `player_on_world_has_death_persistent_variables`.`death_persistent_variables_uuid`  FROM `player` 
  LEFT JOIN `player_on_world_has_death_persistent_variables`
    ON `player`.`uuid` = `player_on_world_has_death_persistent_variables`.`player_uuid`
    AND `player_on_world_has_death_persistent_variables`.`world_uuid` =  CAST($VAR_WorldOrderedUUID$ AS BINARY)
  WHERE `player`.`steamid` = $VAR_SteamID$
  
  
  $VAR_PlayerOrderedUUID$ = result.uuid
  $VAR_VariabOrderedUUID$ = result.uuid
  
  if($VAR_PlayerOrderedUUID$ == empty) {
    $VAR_PlayerOrderedUUID$ = generateOrderedUUID();
    $VAR_BattleyeID$ = calculateBattleyeIDfromSteamID($VAR_SteamID$);
    INSERT INTO `player` (`uuid`, `steamid`, `battleyeid`, `firstlogin`, `firstnick`, `lastlogin`, `lastnick`, `bancount`, `banreason`, `banbegindate`, `banenddate`) 
    VALUES (CAST($VAR_PlayerOrderedUUID$ AS BINARY), $VAR_SteamID$, c, NOW(), $VAR_Nickname$, NOW(), $VAR_Nickname$, '0', NULL, NULL, NULL);
  } else {
    UPDATE `player` SET `lastlogin` = NOW(), `lastnick` = $VAR_Nickname$ WHERE `player`.`uuid` = CAST($VAR_PlayerOrderedUUID$ AS BINARY);
  }
  
 /**
  * \brief  Get available Character Informations
  *
  *         If the server detects that there is no existing Death Persistent Variables
  *         for the Player on the World give the Player a one time chance to link
  *         his Data on the World to an other World if existing.
  *         Returns a list of available Informations
  *
  * \param      PlayerOrderedUUID UUID of Player
  *             WorldOrderedUUID  UUID of World (taken from configfile)
  * \return     ArmA Array        Containing available Death Persistent Variables
  *
  */
  SELECT `character`.`death_persistent_variables_uuid `
  FROM `world_is_linked_to_world`
  INNER JOIN `death_persistent_variables`
    ON `world_is_linked_to_world`.`world_uuid2` = `character`.`uuid`
  WHERE `world_is_linked_to_world`.`world_uuid1` = $VAR_WorldOrderedUUID$

/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/

 /**
  * \brief  Link Death Persistent Character Information
  *
  *         takes an existing UUID of Death Persistent Variables and links it to the current world
  *
  * \param      PlayerOrderedUUID UUID of Player
  *             WorldOrderedUUID  UUID of World (taken from configfile)
  *             VariabOrderedUUID UUID of Death Persistent Variables
  * \return     VariabOrderedUUID UUID of Death Persistent Variables
  *
  */
  INSERT INTO `player_on_world_has_death_persistent_variables` (`player_uuid`, `world_uuid`, `death_persistent_variables_uuid`) 
  VALUES (CAST($VAR_PlayerOrderedUUID$ AS BINARY), CAST($VAR_WorldOrderedUUID$ AS BINARY), CAST($VAR_VariabOrderedUUID$ AS BINARY));
  
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/

 /**
  * \brief  Get Character
  *
  *         Returns CharacterData or Empy Array if no alive Character
  *
  * \param      PlayerOrderedUUID UUID of Player
  *             WorldOrderedUUID  UUID of World (taken from configfile)
  * \return     ArmA Array        Containing CharacterData or Empty Array
  *
  */
  SELECT `character`.`uuid`, `animationstate`, `direction`, `positiontype`, `positionx`,
        `positiony`, `positionz`, `classname`, `hitpoints`, `variables`, `persistentvariables`, `textures`, `inventoryuniform`,
        `inventoryvest`, `inventorybackpack`, `uniform`, `vest`, `backpack`, `headgear`, `googles`, 
        `primaryweapon`, `secondaryweapon`, `handgun`, `tools`, `currentweapon`
  FROM `player_on_world_has_character`
  INNER JOIN `character`
    ON `player_on_world_has_character`.`character_uuid` = `character`.`uuid`
  INNER JOIN `charactershareables`
    ON `character`.`charactershareables_uuid` = `charactershareables`.`uuid`
  INNER JOIN `death_persistent_variables`
    ON `charactershareables`.`death_persistent_variables_uuid` = `death_persistent_variables`.`uuid`
  WHERE `player_on_world_has_character`.`player_uuid` = CAST($VAR_PlayerOrderedUUID$ AS BINARY)
    AND `player_on_world_has_character`.`world_uuid` =  CAST($VAR_WorldOrderedUUID$ AS BINARY)
    AND `player_on_world_has_character`.`killinfo_uuid` IS NULL

/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/

 /**
  * \brief  Create New Character DATA
  *
  *         Returns UUID of new Character DATA
  *
  * \param      PlayerOrderedUUID UUID of Player
  *             WorldOrderedUUID  UUID of World (taken from configfile)
  *             AnimationState    Current AnimationState
  *             Direction         Current Direction
  *             PositionType      Type of Position e.g. 1 == getPos, 2 == getPosASL, 3 == getPosATL
  *             PositionX         PositionX
  *             Positiony         Positiony
  *             Positionz         Positionz
  *             Classname         Classname of Character
  *             HitPoints         getAllHitPointsDamage player
  *             Variables         allVariables player - if set as character based in configfile
  *             Textures          getObjectTextures player - only set if changed
  *             InventoryUniform  Everything in the uniform gear
  *             InventoryVest     Everything in the vest gear
  *             InventoryBackpack Everything in the backpack gear
  *             Uniform           Name of Uniform - uniform player
  *             Vest              Name of Vest - vest player
  *             Backpack          Name of Backpack - backpack player
  *             Headgear          Name of the Headgear - headgear player
  *             Googles           Name of the Googles - goggles player
  *             PrimaryWeapon     Name of PrimaryWeapon including attachments - primaryWeapon player + primaryWeaponItems player
  *             SecondaryWeapon   Name of SecondaryWeapon including attachments - secondaryWeapon player + secondaryWeaponItems player
  *             Handgun           Name of Handgun including attachments - handgunWeapon player + handgunItems player
  *             Tools             List of Tools - assignedItems player;
  *             Currentweapon     Name of curent Weapon - currentWeapon player
  * \return     CharOrderedUUID   UUID of Character
  *
  */
  /* get the uuid for the Death Persistent Variables */
  result = SELECT `death_persistent_variables_uuid` 
  FROM `player_on_world_has_death_persistent_variables` 
  WHERE `player_uuid` = CAST($VAR_PlayerOrderedUUID$ AS BINARY)
    AND `world_uuid` = CAST($VAR_WorldOrderedUUID$ AS BINARY)

  $VAR_VariabOrderedUUID$ = result.death_persistent_variables_uuid
  
  if ($VAR_VariabOrderedUUID$ == empty) {
    $VAR_VariabOrderedUUID$ = generateOrderedUUID();
    INSERT INTO `death_persistent_variables` (`uuid`, `persistentvariables`) VALUES (CAST($VAR_VariabOrderedUUID$ AS BINARY), NULL);
    INSERT INTO `player_on_world_has_death_persistent_variables` (`player_uuid`, `world_uuid`, `death_persistent_variables_uuid`) 
    VALUES (CAST($VAR_PlayerOrderedUUID$ AS BINARY), CAST($VAR_WorldOrderedUUID$ AS BINARY), CAST($VAR_VariabOrderedUUID$ AS BINARY));
  }
  

  /* get alive linked character shareables */
  result = SELECT `charactershareables`.`uuid`
  FROM `player_on_world_has_character`
  INNER JOIN `character`
    ON `player_on_world_has_character`.`character_uuid` = `character`.`uuid`
  INNER JOIN `charactershareables`
    ON `character`.`charactershareables_uuid` = `charactershareables`.`uuid`
  WHERE `player_on_world_has_character`.`player_uuid` = CAST($VAR_PlayerOrderedUUID$ AS BINARY)
    AND `player_on_world_has_character`.`killinfo_uuid` IS NULL
    AND `player_on_world_has_character`.`world_uuid` IN  (
        SELECT `world_uuid`
        FROM `player_on_world_has_death_persistent_variables` 
        WHERE `death_persistent_variables_uuid` = $VAR_VariabOrderedUUID$
    )
    LIMIT 1

  $VAR_CharacterShareablesOrderedUUID$ = result.uuid;
  
  /* if no alive linked character shareables found create new one */
  if ( $VAR_CharacterShareablesOrderedUUID$ == empty) {
    $VAR_CharacterShareablesOrderedUUID$ = generateOrderedUUID();
    INSERT INTO `charactershareables` (`uuid`, `classname`, `death_persistent_variables_uuid`) 
    VALUES (CAST($VAR_CharacterShareablesOrderedUUID$ AS BINARY), $VAR_CLASSNAME$, CAST($VAR_VariabOrderedUUID$ AS BINARY));
    
    INSERT INTO `charactershareables` (`uuid`, `classname`, `hitpoints`, 
                                       `variables`, `death_persistent_variables_uuid`, `textures`, 
                                       `inventoryuniform`, `inventoryvest`, `inventorybackpack`, 
                                       `uniform`, `vest`, `backpack`, 
                                       `headgear`, `googles`, `primaryweapon`, 
                                       `secondaryweapon`, `handgun`, `tools`, 
                                       `currentweapon`) 
                               VALUES ($VAR_CharacterShareablesOrderedUUID$, $VAR_CLASSNAME$, $VAR_HITPOINTS$, 
                                       $VAR_VARIABLES$, $VAR_VariabOrderedUUID$, $VAR_TEXTURES$, 
                                       $VAR_INVENTORYUNIFORM$, $VAR_INVENTORYVEST$, $VAR_INVENTORYBACKPACK$, 
                                       $VAR_UNIFORM$, $VAR_VEST$, $VAR_BACKPACK$, 
                                       $VAR_HEADGEAR$, $VAR_GOOGLES$, $VAR_PRIMARYWEAPON$, 
                                       $VAR_SECONDARYWEAPON$, $VAR_HANDGUN$, $VAR_TOOLS$, 
                                       $VAR_CURRENTWEAPON$)
   
  }
  
  /* add character world specific data */
  $VAR_CharacterOrderedUUID$ = generateOrderedUUID();
  INSERT INTO `character` (`uuid`, `animationstate`, `direction`, 
                           `positiontype`, `positionx`, `positiony`, 
                           `positionz`, `charactershareables_uuid`) 
                   VALUES (CAST($VAR_CharacterOrderedUUID$ AS BINARY), $VAR_ANIMATIONSTATE$, $VAR_DIRECTION$, 
                           $VAR_POSITIONTYPE$, $VAR_POSITIONX$, $VAR_POSITIONY$, 
                           $VAR_POSITIONZ$, CAST($VAR_CharacterShareablesOrderedUUID$ AS BINARY))

  
  /* add character to world */
  INSERT INTO `player_on_world_has_character` (`player_uuid`, `world_uuid`, `character_uuid`, `killinfo_uuid`) 
  VALUES ((CAST($VAR_PlayerOrderedUUID$ AS BINARY), (CAST($VAR_WorldOrderedUUID$ AS BINARY), (CAST($VAR_CharacterOrderedUUID$ AS BINARY), NULL)

/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
  
 /**
  * \brief  Update Character
  *
  *         Returns UUID of Character DATA
  *
  * \param      CharOrderedUUID   UUID of Character
  *             AnimationState    Current AnimationState
  *             Direction         Current Direction
  *             PositionType      Type of Position e.g. 1 == getPos, 2 == getPosASL, 3 == getPosATL
  *             PositionX         PositionX
  *             Positiony         Positiony
  *             Positionz         Positionz
  *             Classname         Classname of Character
  *             HitPoints         getAllHitPointsDamage player
  *             Variables         allVariables player - if set as character based in configfile
  *             PersistentVariables allVariables player - if set as player based in configfile
  *             Textures          getObjectTextures player - only set if changed
  *             InventoryUniform  Everything in the uniform gear
  *             InventoryVest     Everything in the vest gear
  *             InventoryBackpack Everything in the backpack gear
  *             Uniform           Name of Uniform - uniform player
  *             Vest              Name of Vest - vest player
  *             Backpack          Name of Backpack - backpack player
  *             Headgear          Name of the Headgear - headgear player
  *             Googles           Name of the Googles - goggles player
  *             PrimaryWeapon     Name of PrimaryWeapon including attachments - primaryWeapon player + primaryWeaponItems player
  *             SecondaryWeapon   Name of SecondaryWeapon including attachments - secondaryWeapon player + secondaryWeaponItems player
  *             Handgun           Name of Handgun including attachments - handgunWeapon player + handgunItems player
  *             Tools             List of Tools - assignedItems player;
  *             Currentweapon     Name of curent Weapon - currentWeapon player
  * \return     CharOrderedUUID   Containing CharacterData or Empty Array
  *
  */
  
  UPDATE `characterview` 
  SET `animationstate` = $VAR_AnimationState$,
    `direction` = $VAR_DIRECTION$,
    `positiontype` = $VAR_POSITIONTYPE$,
    `positionx` = $VAR_POSITIONX$,
    `positiony` = $VAR_POSITIONY$,
    `positionz` = $VAR_POSITIONZ$,
    `classname` = $VAR_CLASSNAME$,
    `hitpoints` = $VAR_HITPOINTS$,
    `variables` = $VAR_VARIABLES$,
    `persistentvariables` = $VAR_PERSISTENTVARIABLES$,
    `textures` = $VAR_TEXTURES$,
    `inventoryuniform` = $VAR_INVENTORYUNIFORM$,
    `inventoryvest` = $VAR_INVENTORYVEST$,
    `inventorybackpack` = $VAR_INVENTORYBACKPACK$,
    `uniform` = $VAR_UNIFORM$,
    `vest` = $VAR_VEST$,
    `backpack` = $VAR_BACKPACK$,
    `headgear` = $VAR_HEADGEAR$,
    `googles` = $VAR_GOOGLES$,
    `primaryweapon` = $VAR_PRIMARYWEAPON$,
    `secondaryweapon` = $VAR_SECONDARYWEAPON$,
    `handgun` = $VAR_HANDGUN$,
    `tools` = $VAR_TOOLS$,
    `currentweapon` = $VAR_CURRENTWEAPON$
  WHERE `characterview`.`uuid` = CAST($VAR_CharacterOrderedUUID$ AS BINARY);

/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/

 /**
  * \brief  Update Character Location only
  *
  *         Returns UUID of Character DATA
  *
  * \param      CharOrderedUUID   UUID of Character
  *             AnimationState    Current AnimationState
  *             Direction         Current Direction
  *             PositionType      Type of Position e.g. 1 == getPos, 2 == getPosASL, 3 == getPosATL
  *             PositionX         PositionX
  *             Positiony         Positiony
  *             Positionz         Positionz
  * \return     CharOrderedUUID   Containing CharacterData or Empty Array
  *
  */
  
  UPDATE `character` 
  SET `animationstate` = $VAR_AnimationState$,
    `animationstate` = $VAR_ANIMATIONSTATE$,
    `direction` = $VAR_DIRECTION$,
    `positiontype` = $VAR_POSITIONTYPE$,
    `positionx` = $VAR_POSITIONX$,
    `positiony` = $VAR_POSITIONY$,
    `positionz` = $VAR_POSITIONZ$
  WHERE `characterview`.`uuid` = CAST($VAR_CharacterOrderedUUID$ AS BINARY);

/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/


 /**
  * \brief  Create New Object DATA
  *
  *         Returns UUID of new Object DATA, NEEDS an additional UPDATE
  *         to actualy submit the Data - helps to reduce code that needs 
  *         to be debugged
  *
  * \param      WorldOrderedUUID  UUID of World (taken from configfile)
  * \return     ObjectOrderedUUID UUID of Character
  *
  */
  
  $VAR_ObjectOrderedUUID$ = generateOrderedUUID();
  INSERT INTO `object` (`uuid`, `classname`, `priority`, `timelastused`, `timecreated`) VALUES (CAST($VAR_ObjectOrderedUUID$ AS BINARY), 'BrokenObject', '999', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
  INSERT INTO `world_has_objects` (`world_uuid`, `object_uuid`) VALUES (CAST($VAR_WorldOrderedUUID$ AS BINARY), CAST($VAR_ObjectOrderedUUID$ AS BINARY))

/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
  
 /**
  * \brief  Update Character
  *
  *         Returns UUID of Character DATA
  *
  * \param      ObjectOrderedUUID   UUID of Character
  *             Classname         Classname of Character
  *             Priority          Spawn Priority the lower the Number the higher the Priority e.g. 32 == Building, 64 == Props, 128 == Vehicles ...
  *             Visible           Sets the Vehicle to be visible, maybe it is visible because loaded in another object
  *             Accesscode        An Code to Open/Close Objects like Doors
  *             Locked            State if Object is locked or not
  *             CharOrderedUUID   UUID of the Player Owning the Object
  *             Hitpoints         getAllHitPointsDamage object
  *             Damage            damage object 
  *             Fuel              fuel object
  *             Fuelcargo         getFuelCargo object
  *             Repaircargo       getRepairCargo object
  *             Items             Items in Inventory
  *             Magazines         Magazines in Inventory
  *             Weapons           Weapons in Inventory
  *             Backpacks         Backpacks  in Inventory
  *             Magazinesturret   Magazines in Turrets - magazinesAllTurrets object
  *             Variables         allVariables object - if set as whitelisted in configfile
  *             AnimationState    Current AnimationState
  *             Textures          Custom Textures of Object
  *             Direction         Current Direction
  *             PositionType      Type of Position e.g. 1 == getPos, 2 == getPosASL, 3 == getPosATL
  *             PositionX         PositionX
  *             Positiony         Positiony
  *             Positionz         Positionz
  * \return     ObjectOrderedUUID   Containing CharacterData or Empty Array
  *
  */
  
  UPDATE `object` 
  SET `classname` = $VAR_CLASSNAME$,
    `priority` = $VAR_PRIORITY$,
    `visible` = $VAR_VISIBLE$,
    `accesscode` = $VAR_ACCESSCODE$,
    `locked` = $VAR_LOCKED$,
    `player_uuid` = $VAR_PLAYER_UUID$,
    `hitpoints` = $VAR_HITPOINTS$,
    `damage` = $VAR_DAMAGE$,
    `fuel` = $VAR_FUEL$,
    `fuelcargo` = $VAR_FUELCARGO$,
    `repaircargo` = $VAR_REPAIRCARGO$,
    `items` = $VAR_ITEMS$,
    `magazines` = $VAR_MAGAZINES$,
    `weapons` = $VAR_WEAPONS$,
    `backpacks` = $VAR_BACKPACKS$,
    `magazinesturret` = $VAR_MAGAZINESTURRET$,
    `variables` = $VAR_VARIABLES$,
    `animationstate` = $VAR_ANIMATIONSTATE$,
    `textures` = $VAR_TEXTURES$,
    `direction` = $VAR_DIRECTION$,
    `positiontype` = $VAR_POSITIONTYPE$,
    `positionx` = $VAR_POSITIONX$,
    `positiony` = $VAR_POSITIONY$,
    `positionz` = $VAR_POSITIONZ$
  WHERE `characterview`.`uuid` = CAST($VAR_ObjectOrderedUUID$ AS BINARY);

/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/

 /**
  * \brief  Create New Object DATA
  *
  *         Returns UUID of new Object DATA, NEEDS an additional UPDATE
  *         to actualy submit the Data - helps to reduce code that needs 
  *         to be debugged
  *
  * \param      ObjectOrderedUUID  UUID of World (taken from configfile)
  * \return     ArmAArray          Character with ObjectDATA
  *
  */
  
  SELECT `uuid`, `classname`, `priority`, `visible`, 
         `accesscode`, `locked`, `player_uuid`, `hitpoints`, 
         `damage`, `fuel`, `fuelcargo`, `repaircargo`, 
         `items`, `magazines`, `weapons`, `backpacks`, 
         `magazinesturret`, `variables`, `animationstate`, 
         `textures`, `direction`, `positiontype`, `positionx`, 
         `positiony`, `positionz` FROM `object`
  WHERE `uuid` = CAST($VAR_ObjectOrderedUUID$ AS BINARY);

/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/

 /**
  * \brief  Dump All Objects of World
  *
  *         Returns every object of the current world 
  *         including the friendlist of the object owner 
  *
  * \param      WorldOrderedUUID  UUID of World (taken from configfile)
  * \return     ArmAArray          Character with ObjectDATA
  *
  */

  SELECT `object`.`uuid`, `object`.`classname`, `object`.`priority`, 
       `object`.`visible`, `object`.`accesscode`, `object`.`locked`, 
       `object`.`player_uuid`, `object`.`hitpoints`, `object`.`damage`, 
       `object`.`fuel`, `object`.`fuelcargo`, `object`.`repaircargo`, 
       `object`.`items`, `object`.`magazines`, `object`.`weapons`, 
       `object`.`backpacks`, `object`.`magazinesturret`, `object`.`variables`, 
       `object`.`animationstate`, `object`.`textures`, `object`.`direction`, 
       `object`.`positiontype`, `object`.`positionx`, `object`.`positiony`, 
       `object`.`positionz`, GROUP_CONCAT(`player`.`steamid` SEPARATOR ', ') AS friendlist
  FROM `world_has_objects` 
  INNER JOIN `object`
    ON `world_has_objects`.`object_uuid` = `object`.`uuid`
  LEFT JOIN `player_is_friend_with_player`
    ON `object`.`player_uuid` = `player_is_friend_with_player`.`player1_uuid`
  LEFT JOIN `player`
    ON `player_is_friend_with_player`.`player2_uuid` = `player`.`uuid`
  WHERE `world_has_objects`.`world_uuid` = CAST($VAR_WorldOrderedUUID$ AS BINARY)
  GROUP BY `object`.`uuid`


/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
/*************************************************************************************************************************************/
